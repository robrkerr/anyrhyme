<%= form_for @query, :url => query_path do |q| %>
  <div id="input_area">
    <div class="text_field">
      <% if @query.dictionary_mode %>
        <%= q.text_field :text, :value => "", :autocomplete => :off, :class => 'main-input' %>
      <% else %>
        <%= q.text_field :text, :value => "", :class => 'main-input' %>
      <% end %>
      <%= q.text_field :dictionary, :type => :hidden, :value => (@query.dictionary || "0") %>
    </div>
    <% if @query.dictionary == "0" %>
      <div class="rap_button_box">
        <%= q.submit "Rap", :class => 'rap_button' %>
      </div>
    <% else %> 
      <div class="rap_button_box">
        <%= q.submit "Search", :class => 'rap_button' %>
      </div>
    <% end %>
  </div>
<% end %>

<div id="wr_heading_row" class="word_table heading">
  <div class="word">
    <%= @query.text %>
  </div>
  <div class="controls">
    <!-- background -->
  </div>
  <div class="syllables"> <%= (@query.word.try(&:num_syllables) || "") unless (@query.dictionary=="1") %> </div>
  <div class="pronunciation <%= @query.reversed_tag %>">
    <% if @query.dictionary_mode %>
      <% syllables = [] %>
    <% else %>
      <% syllables = @query.word.try(&:syllables) || [] %>
    <% end %>
    <% syllables = syllables.reverse unless @query.reversed_mode %>
    <% syllables.each_with_index do |ph,j| %>
      <div class="spacer <%= @query.reversed_tag %>"><%= " . " unless j == 0 %></div>
      <div class="single_syllable <%= @query.reversed_tag %>"> <%= ph.label.gsub("-"," ") %> </div>
    <% end %>
  </div>
</div>

<script>
  $(document).ready(function() {
    var reset_hidden_fields = function() {
      $("#query_match_string").val("");
      $("#query_word_type").val("");
      $("#query_id").val("");
    };
    $("#query_text").change(function() {
      $("#wr_heading_row div.pronunciation").html("");
      $("#wr_heading_row div.syllables").html("");
      reset_hidden_fields();
    });
    $("#query_text").focus().val($("#query_text").val());
    if ($("#query_dictionary").val()!="1") {
      $(function() {
        $("#query_text").autocomplete({
          source: '<%= query_path(:json, {:autocomplete => "words"}) %>',
          select: function(event, ui) {
            $("#query_text").val(ui.item.label);
            $("#query_id").val(ui.item.id);
            if ($(".syllables").val()!="") {
              $("#wr_heading_row div.syllables").html(ui.item.num_syllables);
              if ($("#wr_heading_row div.pronunciation").hasClass("normal_order")) {
                $("#wr_heading_row div.pronunciation").html("<div class='single_syllable normal_order'>" + ui.item.reversed_phonemes.join("</div><div class='spacer normal_order'> - </div><div class='single_phoneme normal_order'>") + "</div>");
              } 
              else if ($("#wr_heading_row div.pronunciation").hasClass("reversed")) {
                $("#wr_heading_row div.pronunciation").html("<div class='single_syllable reversed'>" + ui.item.phonemes.join("</div><div class='spacer reversed'> - </div><div class='single_syllable reversed'>") + "</div>");
              }
            }
            $("#new_query").submit();
            return false;
          }
        }).data("uiAutocomplete")._renderItem = function(ul, item) {
          return $("<li></li>")
            .data("item.autocomplete", item)
            .append("<a><span class='autoleft'>" + item.label + " </span><span class='autoright'> " + item.phonetic_label + "</span></a>")
            .appendTo(ul);
          };
      });
    }
    $(function() {
      var available_segments;
      if ($(".first_segment_field span").html()=="Last segment:") {
        available_segments = "<%= query_path(:json, {autocomplete: 'segments', reverse: '1'}) %>"
      } else {
        available_segments = "<%= query_path(:json, {autocomplete: 'segments', reverse: '0'}) %>"
      }
      $("#query_first_segment_text").autocomplete({
        source: available_segments,
        select: function(event, ui) {
          $("#query_first_segment_text").val(ui.item.label);
          $("#query_first_segment").val(ui.item.id);
          return false;
        }
      }).data("uiAutocomplete")._renderItem = function(ul, item) {
        return $("<li></li>")
          .data("item.autocomplete", item)
          .append("<a><span>" + item.label + " </span></a>")
          .appendTo(ul);
        };
    });
  });
</script>
